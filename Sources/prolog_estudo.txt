Prolog não se baseia em "como fazer", mas sim em "o que é verdade". É uma linguagem de programação lógica, onde você define fatos e regras, e o Prolog tenta encontrar soluções que satisfaçam essas definições.

---

## Guia Detalhado e Aprofundado de Prolog para Iniciantes

### 1. A Filosofia e o Paradigma do Prolog

Antes de mergulharmos na sintaxe, é crucial entender a mente por trás do Prolog.

* **Programação Lógica e Declarativa:** Ao contrário da programação imperativa (onde você dá instruções passo a passo para o computador executar), na programação lógica você descreve o *problema* em termos de *fatos* e *regras*. O sistema Prolog então usa um mecanismo de inferência para *deduzir* soluções.
* **Base de Conhecimento:** Um programa Prolog é essencialmente uma base de conhecimento, composta por fatos e regras que descrevem um domínio específico.
* **Consulta:** Você interage com o Prolog fazendo "perguntas" (consultas) sobre a base de conhecimento. O Prolog tentará provar a verdade da sua consulta usando os fatos e regras disponíveis.
* **Unificação:** É o processo fundamental pelo qual Prolog compara e casa termos. Se dois termos podem ser feitos idênticos, eles unificam. Variáveis desempenham um papel crucial na unificação.
* **Backtracking:** Se Prolog encontra um caminho que não leva a uma solução, ele automaticamente "volta atrás" e tenta outro caminho. Isso é essencial para a busca de soluções em espaços de problemas complexos.

### 2. Sintaxe Básica: Fatos, Regras e Consultas

A linguagem "fala" através de predicados, que representam relações.

#### 2.1. Fatos

Fatos são declarações de verdades incondicionais sobre o mundo. São as unidades mais básicas de informação.

* **Estrutura:** `nome_do_predicado(argumento1, argumento2, ...).`
* **Exemplos:**
    * `pai(joao, maria).` % João é pai de Maria.
    * `gosta_de(ana, programar).` % Ana gosta de programar.
    * `fruta(maca).` % Maçã é uma fruta.
    * `numero(10).` % 10 é um número.

**Observações:**
* Todos os predicados, argumentos e nomes de variáveis devem começar com uma letra minúscula se forem átomos (constantes).
* Cada fato termina com um ponto (`.`).

#### 2.2. Regras

Regras são declarações condicionais de verdade. Elas definem que algo é verdade se certas condições forem satisfeitas.

* **Estrutura:** `cabeca :- corpo.`
    * `cabeca`: É o que queremos provar que é verdade.
    * `:-`: Lê-se como "se" (ou "é verdade se").
    * `corpo`: É uma lista de condições que devem ser verdadeiras para que a cabeça seja verdadeira. As condições são separadas por vírgulas (`,`), que representam "E lógico".
* **Exemplos:**
    * `filho(X, Y) :- pai(Y, X).` % X é filho de Y SE Y é pai de X.
    * `aviso_legal :- idade(X), X < 18.` % É um aviso legal SE a idade de X é menor que 18.
    * `neto(N, A) :- pai(P, N), pai(A, P).` % N é neto de A SE P é pai de N E A é pai de P.

**Observações:**
* Variáveis (veremos a seguir) são cruciais em regras.
* As vírgulas (`,`) no corpo de uma regra significam uma **conjunção lógica (AND)**.

#### 2.3. Consultas

Você faz perguntas ao Prolog para inferir informações da base de conhecimento. As consultas são feitas no *prompt* do interpretador Prolog.

* **Estrutura:** `?- consulta.`
* **Exemplos com a base de conhecimento acima:**
    ```prolog
    % Base de conhecimento (salve em um arquivo .pl e consulte no interpretador)
    pai(joao, maria).
    pai(joao, pedro).
    pai(carlos, joao).
    gosta_de(ana, programar).
    gosta_de(pedro, jogar).
    fruta(maca).
    fruta(banana).
    numero(10).
    numero(20).

    filho(X, Y) :- pai(Y, X).
    aviso_legal :- idade(X), X < 18. % Não temos 'idade' definida, então isso falhará por enquanto
    neto(N, A) :- pai(P, N), pai(A, P).
    ```

    * `?- pai(joao, maria).`
        * **Resultado:** `true.` (É verdade, pois temos o fato `pai(joao, maria).`)
    * `?- pai(joao, ana).`
        * **Resultado:** `false.` (Não há um fato ou regra que prove isso.)
    * `?- gosta_de(ana, OQueElaGosta).`
        * **Resultado:** `OQueElaGosta = programar.` (Prolog unifica `OQueElaGosta` com `programar` para satisfazer a consulta.)
    * `?- filho(Maria, Joao).`
        * **Resultado:** `true.` (Prolog usa a regra `filho(X, Y) :- pai(Y, X).` e unifica `X` com `Maria` e `Y` com `Joao`, resultando em `pai(joao, maria)`, que é um fato verdadeiro.)
    * `?- neto(N, carlos).`
        * **Resultado:** `N = maria ;` (Maria é neta de Carlos, pois Carlos é pai de João e João é pai de Maria.)
        * `N = pedro.` (Pedro também é neto de Carlos.)
        * (Você pressiona `;` para buscar mais soluções, se houver.)
    * `?- fruta(X).`
        * **Resultado:** `X = maca ;`
        * `X = banana.`

### 3. Variáveis e Termos

Prolog não tem "tipos de dados" no sentido tradicional de linguagens imperativas. Ele trabalha com **termos**.

#### 3.1. Termos

São os blocos de construção de todos os dados no Prolog. Existem quatro tipos de termos:

* **Átomos:** Constantes simbólicas.
    * Começam com letra minúscula (ou entre aspas simples `'` se começarem com maiúscula ou contiverem espaços/símbolos).
    * Ex: `joao`, `maca`, `'Programacao Logica'`.
* **Números:** Inteiros ou flutuantes.
    * Ex: `10`, `3.14`, `-5`.
* **Variáveis:** Representam "qualquer coisa". Não têm tipo fixo e podem ser instanciadas (receber um valor) através da unificação.
    * Começam com letra maiúscula ou com sublinhado (`_`).
    * Ex: `X`, `Nome`, `_Algo`.
    * **Variável Anônima (`_`):** Usada quando você não se importa com o valor de uma variável específica. Por exemplo, `pai(joao, _).` significa "João é pai de alguém".
* **Estruturas (Functors):** Combinam um átomo (o functor) com um ou mais termos (os argumentos). Representam relações ou objetos com atributos.
    * Ex: `ponto(X, Y)`, `data(dia, mes, ano)`, `livro(titulo, autor, ano)`.
    * São semelhantes aos predicados, mas podem ser argumentos de outros predicados ou estruturas.

#### 3.2. Unificação: O Coração do Prolog

A unificação é o mecanismo pelo qual Prolog tenta casar termos.

* `X = Y`: Unifica X com Y.
* **Regras de Unificação:**
    * Um átomo unifica apenas com ele mesmo. (`a = a` é verdadeiro, `a = b` é falso).
    * Um número unifica apenas com ele mesmo. (`1 = 1` é verdadeiro, `1 = 2` é falso).
    * Uma variável unifica com *qualquer* termo. Se o termo é outra variável, ambas se tornam "ligadas" (compartilham o mesmo valor). Se o termo é um átomo, número ou estrutura, a variável assume esse valor.
    * Duas estruturas unificam se:
        * Têm o mesmo functor (nome) E
        * Têm a mesma aridade (número de argumentos) E
        * Todos os seus argumentos correspondentes unificam recursivamente.

* **Exemplos de Unificação:**
    * `?- X = 10.` % `X` é instanciado para `10`.
    * `?- X = Y.` % `X` e `Y` são unificados. Se um for instanciado, o outro também será.
    * `?- fruta(maca) = fruta(X).` % `X` é instanciado para `maca`.
    * `?- ponto(1, 2) = ponto(X, Y).` % `X` é instanciado para `1`, `Y` para `2`.
    * `?- ponto(1, 2) = ponto(X).` % Falso (aridade diferente).
    * `?- livro(hobbit, tolken, 1937) = livro(Titulo, Autor, Ano).`
        * `Titulo = hobbit, Autor = tolken, Ano = 1937.`
    * `?- X = Y, Y = 5.`
        * `X = 5, Y = 5.`

### 4. Operadores (Predicados Built-in)

Prolog possui operadores embutidos (predicados que já vêm com a linguagem) para realizar diversas operações.

#### 4.1. Operadores Aritméticos

Não há "atribuição" no Prolog como em linguagens imperativas (`x = x + 1`). Aritmética é realizada com o predicado `is/2`.

* `X is Expressao`: Avalia a `Expressao` e unifica o resultado com `X`.
    * **Importante:** `Expressao` deve ser totalmente instanciada com valores numéricos *antes* de `is` ser chamado.
* **Operadores Comuns:** `+`, `-`, `*`, `/`, `//` (divisão inteira), `mod` (módulo), `^` (potência).
* **Exemplos:**
    * `?- X is 5 + 3.` % `X = 8.`
    * `?- Y is (10 * 2) / 4.` % `Y = 5.0.`
    * `?- Z is 7 mod 3.` % `Z = 1.`
    * `?- A is 2 ** 3.` % `A = 8.` (ou `2 ^ 3` em alguns Prologs)
    * `?- X is Y + 5.` % Erro! `Y` não está instanciado.

#### 4.2. Operadores de Comparação

Usados para comparar valores.

* `=:=`: Igualdade numérica (valores são iguais após avaliação).
* `=\=`: Desigualdade numérica.
* `>`: Maior que.
* `<`: Menor que.
* `>=`: Maior ou igual.
* `<=`: Menor ou igual.
* `==`: Igualdade de termos (termos são idênticos, incluindo variáveis não instanciadas).
* `\==`: Desigualdade de termos.

* **Exemplos:**
    * `?- 5 =:= 2 + 3.` % `true.`
    * `?- 5 =:= 6.` % `false.`
    * `?- 10 > 5.` % `true.`
    * `?- X = 5, Y = 5, X == Y.` % `true.` (ambos `X` e `Y` estão instanciados para `5`)
    * `?- X == Y.` % `false.` (se `X` e `Y` são variáveis não instanciadas, não são *literalmente* o mesmo termo)
    * `?- X = Y, X == Y.` % `true.` (agora `X` e `Y` são o mesmo termo, pois foram unificados)
    * `?- soma(2,3) == soma(X,Y).` % `false.` (termos diferentes devido às variáveis)

#### 4.3. Operadores Lógicos (no corpo de regras)

Como mencionado, a vírgula (`,`) significa **E lógico**. Existe também o **OU lógico**.

* `;` (ponto e vírgula): Representa **OU lógico**. Usado no corpo de regras.
* **Exemplo:**
    `feliz(X) :- tem_dinheiro(X) ; tem_amigos(X).` % X é feliz SE tem dinheiro OU tem amigos.

### 5. Estruturas de Controle de Fluxo (no contexto Prolog)

Prolog não tem `if/else`, `for`, `while` como linguagens imperativas. O "fluxo de controle" é gerenciado pela própria busca de soluções e pelo backtracking.

#### 5.1. Tomada de Decisão (Similar a if/else)

A tomada de decisão é implícita na forma como você escreve regras e como o Prolog as avalia.

* **Múltiplas Cláusulas para o Mesmo Predicado:** Prolog tenta satisfazer a primeira cláusula. Se falhar, tenta a próxima, e assim por diante (backtracking).

    ```prolog
    % Se x é positivo
    tipo_numero(X, positivo) :- X > 0.
    % Se x é zero
    tipo_numero(X, zero) :- X =:= 0.
    % Se x é negativo
    tipo_numero(X, negativo) :- X < 0.
    ```
    * `?- tipo_numero(5, Tipo).` % `Tipo = positivo.`
    * `?- tipo_numero(-3, Tipo).` % `Tipo = negativo.`

* **Corte (`!`)**: Um operador especial que afeta o backtracking.
    * Quando o Prolog encontra um `!`, ele "corta" todas as escolhas alternativas que o teriam levado a esse ponto, tanto à esquerda do `!` quanto nas cláusulas subsequentes do mesmo predicado.
    * **Usos:**
        * **Otimização:** Para evitar buscas desnecessárias quando você sabe que encontrou a solução única ou a melhor.
        * **Definição de negação (`\+`):** Para implementar negação por falha de forma controlada.
        * **Definição de predicados determinísticos:** Garantir que um predicado só retorne uma solução.
    * **Exemplo (com corte para `tipo_numero` otimizado):**
        ```prolog
        tipo_numero_otimizado(X, positivo) :- X > 0, !.
        tipo_numero_otimizado(X, zero) :- X =:= 0, !.
        tipo_numero_otimizado(X, negativo) :- X < 0.
        ```
        * Neste caso, se `X > 0` for verdadeiro, o `!` garante que as outras duas cláusulas para `tipo_numero_otimizado` *nunca* serão tentadas, mesmo se houver backtracking. Isso é útil para eficiência.

* **Negação por Falha (`\+`):** Significa "não é possível provar".
    * `\+ Objetivo`: Verdadeiro se `Objetivo` não pode ser provado.
    * **Importante:** Não é negação lógica no sentido clássico. É negação por falha, significando que o Prolog não encontrou uma prova.
    * **Exemplo:**
        `solteiro(Pessoa) :- \+ casado(Pessoa).` % Pessoa é solteira SE não podemos provar que ela é casada.

#### 5.2. Iteração (Recursão)

Prolog usa **recursão** extensivamente no lugar de loops. Para repetir ações ou processar estruturas de dados, você define uma regra que chama a si mesma.

* **Caso Base:** Uma condição que encerra a recursão.
* **Caso Recursivo:** A regra que se chama, geralmente processando uma parte menor do problema.

* **Exemplo: Calculando o fatorial**
    ```prolog
    fatorial(0, 1).                 % Caso base: 0! é 1
    fatorial(N, F) :-
        N > 0,                     % Condição para o caso recursivo
        N1 is N - 1,               % Reduz N para a próxima chamada
        fatorial(N1, F1),          % Chamada recursiva
        F is N * F1.               % Combina o resultado
    ```
    * `?- fatorial(4, F).`
        * Chama `fatorial(4, F)`
        * `N=4, N1=3, fatorial(3, F1)`
        * `N=3, N1=2, fatorial(2, F2)`
        * `N=2, N1=1, fatorial(1, F3)`
        * `N=1, N1=0, fatorial(0, F4)`
        * `fatorial(0, 1).` -> `F4 = 1`
        * `F3 is 1 * F4` -> `F3 = 1 * 1 = 1`
        * `F2 is 2 * F3` -> `F2 = 2 * 1 = 2`
        * `F1 is 3 * F2` -> `F1 = 3 * 2 = 6`
        * `F is 4 * F1` -> `F = 4 * 6 = 24`
        * **Resultado:** `F = 24.`

### 6. Predicados (Funções/Métodos em Prolog)

No Prolog, o equivalente a "funções" ou "métodos" são os **predicados**. Eles representam relações e são definidos por fatos e regras.

* **Aridade:** O número de argumentos de um predicado é chamado de aridade. `predicado/aridade` é a notação padrão (ex: `pai/2`, `fatorial/2`).
* **Entrada e Saída:** Os argumentos de um predicado não são estritamente "entrada" ou "saída". Eles podem ser usados para ambos, dependendo de como são instanciados na consulta.
    * `?- pai(joao, Maria).` (João é pai de *quem*? `Maria` é uma variável de saída)
    * `?- pai(Quem, pedro).` (*Quem* é pai de Pedro? `Quem` é uma variável de saída)
    * `?- pai(joao, maria).` (Consulta de verificação, ambos são "entrada")

* **Definição de Predicados:** Consiste em escrever os fatos e regras que os definem.
    ```prolog
    % Predicado: parente/2
    parente(X, Y) :- pai(X, Y).
    parente(X, Y) :- mae(X, Y). % Assumindo que você definiria fatos ou regras para 'mae'

    % Predicado: irmao/2
    irmao(X, Y) :- pai(P, X), pai(P, Y), X \== Y. % Compartilham o mesmo pai, e não são a mesma pessoa.
    ```

### 7. Estruturas de Dados Fundamentais

Prolog tem suas próprias maneiras de representar coleções de dados.

#### 7.1. Listas

As listas em Prolog são uma das estruturas de dados mais importantes e flexíveis. São implementadas como uma sequência de elementos, onde cada elemento é unido por uma referência ao próximo.

* **Representação:**
    * Lista vazia: `[]`
    * Lista com elementos: `[elemento1, elemento2, ..., elementoN]`
* **Cabeça e Cauda:** A lista pode ser dividida em `[Cabeça | Cauda]`.
    * `Cabeça`: O primeiro elemento da lista.
    * `Cauda`: O resto da lista (que é outra lista).
* **Unificação com Listas:**
    * `?- [1, 2, 3] = [H | T].` % `H = 1, T = [2, 3].`
    * `?- [A, B | C] = [um, dois, tres, quatro].` % `A = um, B = dois, C = [tres, quatro].`
    * `?- [X] = [Y].` % `X = Y.`

* **Predicados Comuns com Listas (exemplo de implementação recursiva):**

    * **Membro de uma lista (`member/2` - já built-in, mas bom para entender recursão):**
        ```prolog
        % Caso base: O elemento é a cabeça da lista
        meu_member(X, [X | _]).
        % Caso recursivo: O elemento não é a cabeça, então procura na cauda
        meu_member(X, [_ | T]) :- meu_member(X, T).
        ```
        * `?- meu_member(2, [1, 2, 3]).` % `true.`
        * `?- meu_member(5, [1, 2, 3]).` % `false.`
        * `?- meu_member(X, [1, 2, 3]).` % `X = 1 ; X = 2 ; X = 3.`

    * **Anexar listas (`append/3` - já built-in):**
        ```prolog
        % Caso base: Anexar uma lista vazia a L resulta em L
        meu_append([], L, L).
        % Caso recursivo: Pega a cabeça da primeira lista, anexa o resto, e reconstrói
        meu_append([H | T1], L2, [H | T3]) :-
            meu_append(T1, L2, T3).
        ```
        * `?- meu_append([1, 2], [3, 4], Resultado).` % `Resultado = [1, 2, 3, 4].`
        * `?- meu_append(Parte1, [3, 4], [1, 2, 3, 4]).` % `Parte1 = [1, 2].`

#### 7.2. Estruturas (Termos Compostos) como Registros

Embora não sejam "dicionários" ou "hash maps" no sentido imperativo, as **estruturas** (functors com argumentos) podem ser usadas para modelar dados complexos de forma semelhante a registros ou objetos simples.

* **Exemplo:**
    `pessoa(nome('Maria'), idade(30), endereco(rua('Rua A'), numero(123), cidade('Sao Paulo'))).`

* Você acessa os "campos" através da unificação:
    * `?- pessoa(nome(N), idade(A), _) = pessoa(nome('Maria'), idade(30), endereco(rua('Rua A'), numero(123), cidade('Sao Paulo'))).`
        * `N = 'Maria', A = 30.`

* **Vantagens:** Clareza na representação de dados.
* **Desvantagens:** Acesso a campos específicos exige unificação ou predicados auxiliares (não há `objeto.campo`).

#### 7.3. Árvores (Representação Recursiva)

Árvores são naturalmente representadas em Prolog usando termos compostos e recursão.

* **Exemplo: Árvore Binária de Busca**
    ```prolog
    % arvore_vazia
    arvore(nil).
    % arvore(raiz, subarvore_esquerda, subarvore_direita)
    arvore(Valor, Esquerda, Direita).

    % Inserir um elemento na árvore
    insere(X, nil, arvore(X, nil, nil)).
    insere(X, arvore(V, L, R), arvore(V, L1, R)) :- X < V, insere(X, L, L1).
    insere(X, arvore(V, L, R), arvore(V, L, R1)) :- X > V, insere(X, R, R1).
    % Se X = V, não faz nada (já está na árvore)
    ```

---

### Exemplos Práticos e Considerações Avançadas

* **Gerenciamento de Base de Conhecimento:**
    * `consult('meu_programa.pl').` (Carrega um arquivo Prolog no interpretador)
    * `asserta(Fato).` (Adiciona um fato ao início da base de conhecimento em tempo de execução)
    * `assertz(Fato).` (Adiciona um fato ao final da base de conhecimento)
    * `retract(Fato).` (Remove um fato da base de conhecimento)
    * **Cuidado:** Modificar a base de conhecimento dinamicamente é geralmente evitado em Prolog puro, pois afeta a "pureza" lógica e pode ser difícil de raciocinar sobre. Use com parcimônia.

* **Programação com Restrições (Constraint Logic Programming - CLP):** Extensões do Prolog que lidam com problemas de restrições (ex: `clpfd` para inteiros finitos).

* **Processamento de Linguagem Natural (PLN):** Prolog é historicamente forte em PLN devido à sua capacidade de representar e manipular estruturas gramaticais.

* **Sistemas Especialistas:** Construção de sistemas que emulam o conhecimento e raciocínio de um especialista humano.

* **Meta-programação:** Escrever programas que manipulam outros programas Prolog.

### Onde ir a seguir:

1.  **Instale um interpretador Prolog:** SWI-Prolog é uma excelente escolha, gratuito e robusto.
2.  **Pratique!** A melhor forma de aprender Prolog é escrevendo código e fazendo consultas. Comece com problemas pequenos e vá aumentando a complexidade.
3.  **Leia livros e tutoriais:**
    * "Prolog Programming for Artificial Intelligence" por Ivan Bratko (um clássico).
    * "Learn Prolog Now!" (online e gratuito).
    * Documentação do SWI-Prolog.
4.  **Entenda o Backtracking a fundo:** É o motor do Prolog. Desenhe árvores de busca para entender como ele funciona.
5.  **Aprenda sobre o "Problema das N Rainhas" ou "Sudoku Solver" em Prolog:** São exemplos clássicos que demonstram o poder da busca e backtracking.

Prolog é uma linguagem que exige uma mudança de mentalidade, mas, uma vez que você a domina, abre portas para resolver problemas complexos de uma forma elegante e poderosa, especialmente em domínios que envolvem lógica, relações e busca. Boa sorte na sua jornada!
